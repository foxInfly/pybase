"""
函数：对某一特定的功能或者代码块的封装，需要用的时候调用即可；不用重复造轮子，直接用就好
定义：
    def 函数名():
        被封装的功能或者代码块（函数体）

调用：
    函数名()

好处： 简洁、简单，

返回值：
    return 不跟值，返回的是None；函数结束


    函数嵌套
    变量的作用域
    闭包

    装饰器
    迭代器
    生成器
    推导式
    匿名函数
    python内置函数
"""

a = 10  # 全局变量 -> 全局作用域


# 函数可以作为参数和返回值，函数名本质上就是一个变量名，一个内存地址，调用加()
def func():  # 全局函数
    print("1")  # 实参可以是函数（俗称代理模式）

    def inner():  # 函数胡的嵌套  局部函数(局部的东西一般都是自己内部访问使用的)
        print("2")

    # func2 = def():
    # func2()
    a = 20  # 创建一个局部变量，不会改变全局变量的值
    # global a  # 把外面的全局变量引入到局部
    # a = 20  # 再次修改就会生效了
    nonlocal a  # 引入外层（上一层的）变量，有就引入，没有，就继续往外找，直到全局
    a = 20  # 再次修改就会生效了
    print(inner)
    # return func()   # 加()是调用函数
    return inner  # 这里是返回的函数
    b = 20  # 局部变量，局部欧用于
    print(a)


b1 = func()  # 这里b1是func的内部函数
b1()
print(b1)


# 闭包 1.可以让一个变量常驻于内存;2.避免全局变量被修改
# 内层函数对外层函数的引用
def funnc1():
    a = 10

    def innner():
        nonlocal a
        a += 1
        print(a)
        return a

    return innner


ret = funnc1()
ret()

